{"version":3,"sources":["Firebase.js","components/UploadComponent.js","components/UploadItem.js","Credentials.js","components/PastLinksComponent.js","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","process","REACT_APP_LINKAPI","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","analytics","uploadTask","iconStyle","fontSize","color","margin","mediaIcons","image","video","audio","pdf","text","zip","upload","UploadItem","props","displayLink","bind","displayMediaIcon","copiedText","state","copyState","event","this","setState","copyMargin","fileName","length","mediaKeys","Object","keys","i","fileType","includes","running","downloadLink","className","style","backgroundColor","onClick","borderLeft","display","padding","paddingLeft","marginLeft","cursor","toString","expireTime","React","Component","shortenReqHeaders","storageRef","storage","ref","UploadComponent","uploadClicked","onFileSelected","displayProgress","uploadRunning","progress","value","max","width","refs","fileUpload","click","stopPropagation","preventDefault","selectedFile","target","files","fName","replace","child","put","timeCreated","Date","now","type","on","snapshot","bytesTransferred","totalBytes","err","console","log","getDownloadURL","then","downloadURL","shortenRequest","destination","fetch","method","headers","body","JSON","stringify","res","json","link","shortUrl","uploads","parse","localStorage","getItem","push","dLink","genDate","setItem","id","onChange","createListItems","uploadList","ret","currLink","elapsedTime","Math","floor","expiresIn","key","PastLinksComponent","pastLinks","updateList","deleteLinks","setInterval","removeItem","clear","App","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.703cb0b6.chunk.js","sourcesContent":["// Your web app's Firebase configuration\nimport firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_LINKAPI,\n    authDomain: \"shareeasy-dd2ce.firebaseapp.com\",\n    databaseURL: \"https://shareeasy-dd2ce.firebaseio.com\",\n    projectId: \"shareeasy-dd2ce\",\n    storageBucket: \"shareeasy-dd2ce.appspot.com\",\n    messagingSenderId: \"999885360104\",\n    appId: \"1:999885360104:web:2be601450588e71272325d\",\n    measurementId: \"G-1H3P6BK9N7\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;","import React from \"react\";\nimport \"../App.css\";\nimport firebase from \"../Firebase\";\nimport { UploadItem } from \"./UploadItem\";\nimport { shortenReqHeaders } from \"../Credentials\";\nconst SAVED_LINKS = 'SAVED_LINKS'\nconst storageRef = firebase.storage().ref();\nlet uploadTask;\n\n//link item: {fileName, fileType, link, generationDate}\n\nexport class UploadComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.uploadClicked = this.uploadClicked.bind(this);\n        this.onFileSelected = this.onFileSelected.bind(this);\n        this.displayProgress = this.displayProgress.bind(this);\n        this.state = { fileName: \"\", downloadLink: \"\", fileType: \"\", uploadRunning: false, progress: 0 };\n    }\n\n    displayProgress() {\n        if (this.state.uploadRunning) {\n            return <progress value={this.state.progress} max=\"100\" style={{ width: \"80%\" }} />;\n        } else {\n            return <i style={{ display: \"none\" }} />;\n        }\n    }\n\n    uploadClicked(event) {\n        if (!this.state.uploadRunning) {\n            this.setState({ fileName: \"\", downloadLink: \"\", fileType: \"\", uploadRunning: false, progress: 0 });\n            this.refs.fileUpload.click();\n        }\n    }\n\n    //TODO: handle errors\n    onFileSelected(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        const selectedFile = event.target.files[0];\n        if (selectedFile && !this.state.uploadRunning) {\n            let fName = selectedFile[\"name\"];\n            fName = fName.replace(/\\s/g, \"\");\n            uploadTask = storageRef.child(fName).put(selectedFile, {timeCreated: Date.now()});\n            this.setState({ fileName: fName, fileType: selectedFile.type });\n            uploadTask.on(\n                \"state_changed\",\n                (snapshot) => {\n                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n                    this.setState({ progress: progress, uploadRunning: true });\n                },\n                (err) => {\n                    console.log(err);\n                },\n                () => {\n                    uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n                        let shortenRequest = {\n                            destination: downloadURL,\n                        };\n\n                        fetch(\"https://api.rebrandly.com/v1/links\", {\n                            method: \"POST\",\n                            headers: shortenReqHeaders,\n                            body: JSON.stringify(shortenRequest),\n                        })\n                            .then((res) => {\n                                return res.json();\n                            })\n                            .then((link) => {\n                                console.log(link);\n                                this.setState({\n                                    downloadLink: link.shortUrl,\n                                    uploadRunning: false,\n                                    progress: 100,\n                                    fileName: fName,\n                                    fileType: selectedFile.type,\n                                });\n\n                                let uploads = JSON.parse(localStorage.getItem(SAVED_LINKS))\n                                uploads = uploads ? uploads : []\n\n                                uploads.push({\n                                    fileName: fName,\n                                    fileType: selectedFile.type,\n                                    dLink: link.shortUrl,\n                                    genDate: Date.now()\n                                });\n\n                                localStorage.setItem(SAVED_LINKS, JSON.stringify(uploads));\n                            });\n                    });\n                }\n            );\n            console.log(selectedFile);\n            this.setState({ fileName: fName, uploadRunning: true });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"section\">\n                <h3 className=\"sectionInfo\">\n                    Upload a file to generate a download link that can easily be shared. Files that are\n                    uploaded stay available to download for 12 hours.\n                </h3>\n                <a onClick={this.uploadClicked} className=\"uploadButton\" style={{ color: \"white\" }}>\n                    Upload File\n                </a>\n                <input\n                    type=\"file\"\n                    id=\"file\"\n                    ref=\"fileUpload\"\n                    style={{ display: \"none\" }}\n                    onChange={this.onFileSelected}\n                />\n\n                {this.state.fileName !== \"\" ? (\n                    <UploadItem\n                        fileType={this.state.fileType}\n                        fileName={this.state.fileName}\n                        downloadLink={this.state.downloadLink}\n                    />\n                ) : (\n                    <i />\n                )}\n                {this.displayProgress()}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nconst iconStyle = {\n    fontSize: \"52px\",\n    color: \"red\",\n    margin: \"14px\",\n};\nconst mediaIcons = {\n    image: \"fas fa-file-image\",\n    video: \"far fa-file-video\",\n    audio: \"far fa-file-audio\",\n    pdf: \"far fa-file-pdf\",\n    text: \"far fa-file-alt\",\n    zip: \"far fa-file-archive\",\n    upload: \"fas fa-upload\",\n};\nexport class UploadItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.displayLink = this.displayLink.bind(this);\n        this.displayMediaIcon = this.displayMediaIcon.bind(this);\n        this.copiedText = this.copiedText.bind(this);\n        this.state = { copyState: \"#a5bef0\" };\n    }\n\n    copiedText(event) {\n        this.setState({ copyState: \"#c4f5d6\", copyMargin: \"4px\" });\n    }\n\n    displayMediaIcon() {\n        if (this.props.fileName.length === 0) {\n            return mediaIcons.upload;\n        } else {\n            const mediaKeys = Object.keys(mediaIcons);\n            for (let i = 0; i < mediaKeys.length; i++) {\n                if (this.props.fileType.includes(mediaKeys[i])) {\n                    return mediaIcons[mediaKeys[i]];\n                }\n            }\n\n            return mediaIcons.text;\n        }\n    }\n\n    displayLink() {\n        if (!this.props.running && this.props.downloadLink.length !== 0) {\n            return (\n                <div className=\"dLink\" style={{ backgroundColor: this.state.copyState }}>\n                    {this.props.downloadLink}{\" \"}\n                    <CopyToClipboard text={this.props.downloadLink}>\n                        <div\n                            onClick={this.copiedText}\n                            style={{\n                                borderLeft: \"solid 1px black\",\n                                display: \"inline-block\",\n                                padding: \"8px\",\n                                paddingLeft: \"12px\",\n                                marginLeft: \"12px\",\n                                fontSize: \"16px\",\n                            }}\n                        >\n                            <i className=\"far fa-clone\" style={{ cursor: \"pointer\" }} onClick={this.copiedText}></i>\n                        </div>\n                    </CopyToClipboard>\n                </div>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"upItem\">\n                <div className=\"upItemText\">\n                    <i className={this.displayMediaIcon().toString()} style={iconStyle} />\n                    <h3 className=\"fileName\">\n                        {this.props.fileName.length === 0 ? \"Please upload a file...\" : this.props.fileName}\n                    </h3>\n                </div>\n\n                {this.displayLink()}\n\n                {this.props.expireTime ? <h3 className=\"fileName\">{\"Expires in \" + this.props.expireTime + \" hrs\"}</h3> : <div></div>}\n            </div>\n        );\n    }\n}\n","export const shortenReqHeaders = {\n    \"Content-Type\": \"application/json\",\n    \"apikey\": process.env.REACT_APP_LINKAPI\n} ","import React from \"react\";\nimport \"../App.css\";\nimport { UploadItem } from \"./UploadItem\";\n\n\nconst createListItems = (uploadList) => {\n    if (!uploadList) {\n        return;\n    }\n\n    let ret = [];\n\n    for (let i = 0; i < uploadList.length; i++) {\n        const currLink = uploadList[i];\n        let elapsedTime = Math.floor((Date.now() - currLink.genDate) / (60 * 60 * 1000));\n        if (elapsedTime >= 12) {\n            continue;\n        }\n\n        let expiresIn = 12 - elapsedTime;\n        if (expiresIn === 0) {\n            expiresIn = \"<1\";\n        }\n\n        ret.push(\n            <li style={{ display: \"inline-block\" }} key={`link_${i}`}>\n                <UploadItem\n                    fileType={currLink.fileType}\n                    fileName={currLink.fileName}\n                    expireTime={expiresIn}\n                    downloadLink={currLink.dLink}\n                />\n            </li>\n        );\n    }\n\n    return ret;\n};\n\nexport class PastLinksComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        const uploads = JSON.parse(localStorage.getItem(\"SAVED_LINKS\"));\n        this.state = { pastLinks: createListItems(uploads ? uploads : []) };\n        this.updateList = this.updateList.bind(this);\n        this.deleteLinks = this.deleteLinks.bind(this);\n        setInterval(this.updateList, 1000);\n    }\n\n    //TODO: figure out why this is not working\n    deleteLinks() {\n        localStorage.setItem(\"SAVED_LINKS\", \"[]\");\n        localStorage.removeItem(\"SAVED_LINKS\");\n        localStorage.clear();\n        this.setState({\n            pastLinks: []\n        });\n    }\n\n    updateList() {\n        let uploads = JSON.parse(localStorage.getItem(\"SAVED_LINKS\"));\n        console.log(uploads);\n        uploads = uploads ? uploads : [];\n        this.setState({ pastLinks: createListItems(uploads) });\n    }\n\n    render() {\n        return (\n            <div className=\"section\">\n                <h3 className=\"sectionInfo\">Generated download links</h3>\n                {this.state.pastLinks.length > 0 ? (\n                    <div className=\"deleteItems\" onClick={this.deleteLinks}>\n                        Delete Links{\" \"}\n                        <div\n                            style={{\n                                display: \"inline-block\",\n                                padding: \"8px\",\n                                paddingLeft: \"12px\",\n                                marginLeft: \"12px\",\n                                fontSize: \"16px\",\n                            }}\n                        >\n                            <i className=\"fas fa-trash\" style={{ cursor: \"pointer\" }} onClick={this.deleteLinks}></i>\n                        </div>\n                    </div>\n                ) : (\n                    <div></div>\n                )}\n\n                {this.state.pastLinks.length > 0 ? (\n                    <ul className=\"pastUploads\">{this.state.pastLinks}</ul>\n                ) : (\n                    <h3 className=\"fileName\">No Uploads...</h3>\n                )}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport { UploadComponent } from './components/UploadComponent'\nimport { PastLinksComponent } from './components/PastLinksComponent';\n\n\n\nexport const App = () => {\n    return (\n        <div className=\"App\">\n            <div style={{textAlign: \"center\"}}>\n                <h1 className=\"title\">Share Easy!</h1>\n                <i className=\"fas fa-share-alt-square\" style={{\n                    color: \"white\", fontSize: \"50px\",\n                    display: \"inline-block\",\n                    margin: \"0px\"\n                }}></i>\n            </div>\n            <div className=\"content\">\n                <UploadComponent />\n                <PastLinksComponent/>\n            </div>\n        </div>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App }  from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}